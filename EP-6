Child : Writing to pipe 
Child Exiting
Parent : Reading from pipe 
Pipe content is : Welcome


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int fd[2];
    if (pipe(fd) == -1) {
        perror("pipe");
        exit(1);
    }
    int pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }
    else if (pid == 0) {
        // Child process
        // Redirect output to pipe
        close(STDOUT_FILENO);
        dup(fd[1]);
        close(fd[0]);
        close(fd[1]);

        // Execute first command
        execlp("ls", "ls", NULL);

        // If execlp returns, an error occurred
        perror("exec");
        exit(1);
    }
    else {
        // Parent process
        // Redirect input from pipe
        close(STDIN_FILENO);
        dup(fd[0]);
        close(fd[0]);
        close(fd[1]);

        // Execute second command
        execlp("grep", "grep", "a", NULL);

        // If execlp returns, an error occurred
        perror("exec");
        exit(1);
    }
    return 0;
}

Q2 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipefd[2];
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(1);
    }
    int pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }
    else if (pid == 0) {
        // Child process
        close(pipefd[0]); // close unused read end
        dup2(pipefd[1], STDOUT_FILENO); // duplicate write end to stdout
        close(pipefd[1]); // close original write end
        execlp("ls", "ls", "-l", NULL); // execute ls -l
    }
    else {
        // Parent process
        close(pipefd[1]); // close unused write end
        dup2(pipefd[0], STDIN_FILENO); // duplicate read end to stdin
        close(pipefd[0]); // close original read end
        execlp("wc", "wc", "-l", NULL); // execute wc -l
    }
    return 0;
}

Q3
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipefd[2];
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(1);
    }
    int pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }
    else if (pid == 0) {
        // Child process
        close(pipefd[0]); // close unused read end
        dup2(pipefd[1], STDOUT_FILENO); // duplicate write end to stdout
        close(pipefd[1]); // close original write end
        execlp("ls", "ls", "-l", NULL); // execute ls -l
    }
    else {
        // Parent process
        close(pipefd[1]); // close unused write end
        dup2(pipefd[0], STDIN_FILENO); // duplicate read end to stdin
        close(pipefd[0]); // close original read end
        execlp("wc", "wc", "-l", NULL); // execute wc -l
    }
    return 0;
}

Q3
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipefd[2];
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(1);
    }
    int pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }
    else if (pid == 0) {
        // Child process
        close(pipefd[0]); // close unused read end
        dup2(pipefd[1], STDOUT_FILENO); // duplicate write end to stdout
        close(pipefd[1]); // close original write end
        execlp("ls", "ls", "-l", NULL); // execute ls -l
    }
    else {
        // Parent process
        close(pipefd[1]); // close unused write end
        dup2(pipefd[0], STDIN_FILENO); // duplicate read end to stdin
        close(pipefd[0]); // close original read end
        execlp("wc", "wc", "-l", NULL); // execute wc -l
    }
    return 0;
}

